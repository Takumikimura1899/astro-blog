---
import { getBlogs, getBlogCount } from '@/lib/microcms'
import BaseLayout from '@/layouts/BaseLayout.astro'
import BlogCard from '@/components/ui/blog/BlogCard.astro'
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationPrevious,
  PaginationLink,
  PaginationEllipsis,
  PaginationNext,
} from '@/components/ui/pagination'
import { BLOG_INITIALIZE } from '@/constants/BlogInitialize'

const PAGINATION_OFFSET = 2

export async function getStaticPaths() {
  const totalCount = await getBlogCount()
  const pages = Math.ceil(totalCount / BLOG_INITIALIZE.perPage)
  return Array.from({ length: pages }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }))
}

const { page } = Astro.params

const response = await getBlogs({
  limit: BLOG_INITIALIZE.perPage,
  offset: (Number.parseInt(page) - 1) * BLOG_INITIALIZE.perPage,
  orders: '-publishedAt',
  fields: ['id', 'title', 'category', 'category2', 'publishedAt'],
})

const isFirstPage = page === '1'
const isLastPage =
  page === Math.ceil(response.totalCount / BLOG_INITIALIZE.perPage).toString()

const makePaginationLinks = (currentPage: string) => {
  const min = 1
  const max = Math.ceil(response.totalCount / BLOG_INITIALIZE.perPage)
  const currentPageNum = Number.parseInt(currentPage)

  let startPage = Math.max(min, currentPageNum - PAGINATION_OFFSET)
  let endPage = Math.min(max, currentPageNum + PAGINATION_OFFSET)

  if (startPage === min) {
    endPage = Math.min(max, min + 2 * PAGINATION_OFFSET)
  } else if (endPage === max) {
    startPage = Math.max(min, max - 2 * PAGINATION_OFFSET)
  }

  return Array.from({ length: endPage - startPage + 1 }, (_, i) => ({
    page: startPage + i,
    href: `/blogs/page/${startPage + i}`,
    isCurrent: startPage + i === currentPageNum,
  }))
}

const paginationLinks = makePaginationLinks(page)
---

<BaseLayout>
  <main class="space-y-8">
    <h1>一覧</h1>
    <ul class="grid-container">
      {
        response.contents.map((blog) => (
          <li>
            <BlogCard {...blog} />
          </li>
        ))
      }
    </ul>
    <Pagination>
      <PaginationContent>
        {
          !isFirstPage && (
            <PaginationItem>
              <PaginationPrevious href={`${Number.parseInt(page) - 1}`} />
            </PaginationItem>
          )
        }
        {
          Number.parseInt(page) - PAGINATION_OFFSET > 1 && (
            <>
              <PaginationItem>
                <PaginationLink href="1">1</PaginationLink>
              </PaginationItem>
              <PaginationItem>
                <PaginationEllipsis />
              </PaginationItem>
            </>
          )
        }
        {
          paginationLinks.map((link) => (
            <PaginationItem>
              <PaginationLink
                href={!link.isCurrent ? link.href : undefined}
                isActive={link.isCurrent}
              >
                {link.page}
              </PaginationLink>
            </PaginationItem>
          ))
        }
        {
          Number.parseInt(page) + PAGINATION_OFFSET <
            Math.ceil(response.totalCount / BLOG_INITIALIZE.perPage) && (
            <>
              <PaginationItem>
                <PaginationEllipsis />
              </PaginationItem>
              <PaginationItem>
                <PaginationLink
                  href={Math.ceil(
                    response.totalCount / BLOG_INITIALIZE.perPage,
                  ).toString()}
                >
                  {Math.ceil(response.totalCount / BLOG_INITIALIZE.perPage)}
                </PaginationLink>
              </PaginationItem>
            </>
          )
        }
        {
          !isLastPage && (
            <PaginationItem>
              <PaginationNext href={`${Number.parseInt(page) + 1}`} />
            </PaginationItem>
          )
        }
      </PaginationContent>
    </Pagination>
  </main>
</BaseLayout>

<style>
  ul {
    list-style: none;
    padding-left: 0;
  }
  .grid-container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  @media (width < 768px) {
    .grid-container {
      grid-template-columns: 1fr;
    }
  }
</style>
